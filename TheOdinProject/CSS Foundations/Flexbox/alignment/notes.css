flex: 1; 
    -use it to FILL all available space by growing and shrinking the flex items 

suppose you do not want to grow/shrink the flex items but want to take up the space of the container: 
    remove flex: 1;
    this is where alignment properties will take place

justify-content
    -aligns items accross the main axis
    -@ flex container

align-items
    -align items along the cross axis
    -@ flex container

align-self
    -align itself within the cross axis
    -@ flex item

gap Property 
    -similar to margin property
    -add space between flex items (like column gutter)
    -use it in the parent container 


MDN Webdocs
    Flexible Box Module (flexbox)
        -one-dimensional layout model
            -deals with one dimension at a time
        -space distribution and alignment capabilities

    flex-direction values:
        -row
        -row-reverse
        -column
        -column-reverse


    Start and End Lines
        -may vary depending on the language specified in HTML file 
            eg. English may start from left, Arabic may start from right without even specifying it as row-reverse 
        
    The flex container
        display: flex; or display: inline-flex;

        all its child element will become FLEX ITEMS

        initial values for containers as soon as display: flex is defined: 

            -Items display in a row (the flex-direction property's default is row).
            -The items start from the start edge of the main axis.
            -The items do not stretch on the main dimension, but can shrink.
            -The items will stretch to fill the size of the cross axis.
            -The flex-basis property is set to auto.
            -The flex-wrap property is set to nowrap

    Changing flex-direction 
        -row-reverse/column-reverse 
            -will change the start line (suppose we use English) from left to right or top to bottom as well as the order of our flex items
    
    Multi-line flex containers with flex-wrap 
        flex-wrap: wrap; or flex-wrap: nowrap;

        flex-wrap: wrap; (@ flex container)
            -if items too large, it will be wrap onto a NEW line.

        flex-wrap: nowrap; (@ flex container) (default)
            -if items too large, it will shrink to fit
            -if items cannot shrink, it will cause OVERFLOW

    The flex-flow shorthand
        combination of flex-direction and flex-wrap

        flex-flow: [flex-direction] [flex-wrap];
    
    Properties applied to flex items
        -flex-grow
        -flex-shrink
        -flex-basis

        flex-basis
            -default value (not in shorthand): auto 
            -looks if items have a declared size
            -if no declared size, it takes up content size
        
        flex-grow 
            -grow along the main axis from their flex basis
            -'growth factor'

        flex-shrink 
            -shrink along the main axis from their flex basis
            -'shrink factor'

    Flex shorthand
        flex: [flex-grow] [flex-shrink] [flex-basis]

        predefined shorthands:
            flex: initial;
                flex: 0 1 auto;
                items will not grow larger than flex-basis

            flex: auto;
                flex: 1 1 auto;
                grow and shrink

            flex: none;
                flex: 0 0 auto;
                not grow and shrink from basis but will be laid out as flex items 
                for alignment purposes only 

            flex: <positive-number>;
                flex: [n] [n] 0; 
                grow and shrink from 0 dimension

    Alignment, justification and distribution of free space between items
        
        align-items 
            align on cross axis

            initial value: align-items: stretch; 

            values:
            align-items: stretch;
            align-items: flex-start;
            align-items: flex-end;
            align-items: center;

        justify-content
            align on main axis 

            initial value: flex-start;

            value:
            justify-content: flex-start;
            justify-content: flex-end;
            justify-content: center;

            justify-content: space-around;
                -half-space on either end
                -available space distributed around PER item

            justify-content: space-between;
                -equal amount of space between each item
                -no space on either end

            justify-content: space-evenly;
                -full space on either end
                -available space equally distributed

MDN Aligning Items in a Flex Container 
    Properties that control alignment
        1. justify-content
            -on main axis 
        2. align-items
            -on cross axis 
        3. align-self
            -individual flex item on cross axis
        4. align-content 
            -'packing flex lines'
            -space between flex lines on cross axis 
        5. gap, column-gap, and row-gap
            -create gap or gutters BETWEEN flex items (like margin)
        
    The Cross Axis 
        align-items: flex-start
        align-items: flex-end
        align-items: center
        align-items: stretch
        align-items: baseline

        see above notes for align-items 
    
    One item Aligning 
        align-self: flex-start
        align-self: flex-end
        align-self: center
        align-self: stretch
        align-self: baseline

    Aligning content on cross axis 
        -same as justify-content but on cross axis
        -you need an extra space on your height of the container to apply this property

        align-content: flex-start
        align-content: flex-end
        align-content: center
        align-content: space-between
        align-content: space-around
        align-content: stretch (default)
        align-content: space-evenly

        see notes for justify-content values

    Aligning content on main axis

        justify-content: flex-start
        justify-content: flex-end
        justify-content: center
        justify-content: space-between
        justify-content: space-around
        justify-content: space-evenly

    Using auto margins for main axis adjustment
        -there is no justify-self that is why we will use auto margins when dealing with main axis spacing per item 

        margin-left: auto;
        margin-right: auto;

    Creating gaps  
        column-gap 
            -gap between items on MAIN axis 

        row-gap
            -gap between items on CROSS axis
        
        gap
            -both
        
        note of the keyword "BETWEEN". space will only be between 2 flex items and not on the sides 

Typical use cases of Flexbox
    Why? 
        -for controlling a collection of items in one direction

    Common uses: 
    
        Navigation 

        Cards (to push footer down)
        
        Media Objects
            -image and text side by side
                -set max-width for image (it is equivalent to img-fluid)
                -it will be the flex-basis of the flex items 

                -you can also use flex: 1; so the basis of the image and text is 0, thus growing and shrinking them proportionally
                -you can also use flex: auto; @ text content so the content size will be the flex-basis for your image and text

        Form Controls
        