Block VS Inline
    block - see notes on the box model 
    inline - see notes on the box model

    note: do not put extra margin and padding in inline because it has little to no effect

Divs and Spans
    -generic containers

    Div
        -block-level
        -divide the page into different blocks
        -commonly use to group elements
    
    Span
        -inline-level
        -common to group text content

Normal Flow
    Block Flow Direction
        -top to bottom flow 
        -this is the normal flow for block elements
    
    Inline elements
        -no new line, no overflowing content will move down to a new line
    
list of block and inline elements:
https://www.w3schools.com/html/html_blocks.asp



CSS Layout Tutorial notes 
    responsive width (without horizontal scrolling)
        #main {
            max-width: 600px;
            margin: 0 auto;
        }

        by setting max-width, it prevents horizontal scrolling

Position Property
    position: value;

    static
        -default
        -not positioned in any special way 
    relative 
        -added properties can trigger to be different from static
        -can overlap
    fixed 
        -positioned relative to the viewport
        -stay on the same place even if the page is scrolled
        -do not leave gap in the page
    absolute
        -trickiest
        -behaves like fixed but relative to the nearest positioned ancestor instead of relative to the viewport
        -if no ancestor, it uses the body

Float 
    -wrapping text around image 

    float: none|left|right|initial|inherit;

Clear
    -important for controlling the behavior of floats

    If an element is floated to the left, then you should clear to the left.

    clear: none|left|right|both|inherit;

    clearfix hack: 

    .clearfix {
         overflow: auto;
    }

    .clearfix::after {
        content: "";
        clear: both;
        display: table;
    }

Percent Width Layout
    -we can use percentages for width so that it will be that percentage of its container in every viewport 

Responsive Design
    -responds to the browser and devices that it is being shown

Media Queries 
   used for the following:
        -conditionally apply styles with the CSS @media and @import at-rules
        -to target specific media for <style>, <link>, <source> and other HTML elements with the media= attribute.
        -to test and monitor media states using the Window.matchMedia() and MediaQueryList.addListener() JavaScript methods.

    Targeting Media Types 
        Media Types - general category of a device

        all 
            -suitable for all devices 
        print 
            -paged material and documents viewed on screen in print preview mode
        screen
            -for screens

        @media [media type], [media type] {}

    Targetting Media Features
        Media Features  - specific characteristics of a given user agent, output device or environment

        eg. 
            @media (hover: hover) {}
            @media (max-width: value) {}
            @media (color) {}

    Complex Media Queries
        -with the logical operators 'not', 'and', & 'only'
        -combine multiple using ',' comma

        @media (min-width: 30em) and (orientation: landscape) { ... }

        @media (min-height: 680px), screen and (orientation: portrait) { ... }

        @media not all and (monochrome) { ... }
        
        for compatibility with old browsers: 
        @media only screen and (color) { ... }

        @media (not(hover)) { ... }

        can also use 'or'
        @media (not (color)) or (hover) { ... }

display: inline-block;
    -behave like inline but have height and width

    notes:
        1.inline-blocks are affected by vertical-align property 
        2.set width of each column
        3.there will be a gap between columns if there is a gap in the html
