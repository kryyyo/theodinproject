FUNCTIONS (MDN WEB DOCS)
    -reusable blocks of code
    -invoke - fancy word for run or execute
    functionName();

    Parameters 
        -values that need to included inside the function parentheses 
        -sometimes called arguments, properties, or even attributes
    
    Optional Parameters 
        -parameters you do not have to specify
            eg. .join()
                    default: 
                        [1,2,3]
                
                .join(' ')
                    with param:
                        [1 2 3]

    Default Parameters 
        -specify default values for a parameter
            -this is the value that will be outputed if you invoke a function with a default parameter
                eg. 
                    function hello(name='Chris') {
                        console.log(`Hello ${name}!`);
                    }

                    hello('Ari'); // Hello Ari!
                    hello();      // Hello Chris!

    Anonymous functions and arrow functions 
        -you can create a function that doesn't have a name 
        -seen when a function expects to receive another function as a parameter
        -aka "FUNCTION EXPRESSION"
            -not hoisted (raised)
            Syntax:
              function()
    
    Arrow functions
        instead of function(parameter) {} you write the syntax:
            (parameter) => {}

        you can omit curly braces if the function only has one line
        you can omit brackets around the parameter if it only has one line 
        you can also omit the return statement (IMPLICIT)

            eg. 
                item => item * 2

                is equivalent to 

                function doubleItem(item) { 
                    return item * 2;
                }
        
    Function scope and conflicts (TAKE NOTE)
        Global scope 
            -top level OUTSIDE all your functions
            -values defined in the global scope are accessible from everywhere in the code
        

        keep parts of code locked in functions to avoid coexisting variables from different JS Files 

        output()
            -global function
            -to print a data in an html file

        Note: same scoping rules DO NOT apply to loop and conditional bocks

        ReferenceError
            -check what scope and if variable is defined

    Functions inside functions
        -you can call a function anywhere, even inside another function
    
Function return values (MDN Web Docs)
    Return Values 
        -value that a function returns when it has completed 

    functions that do not return any value has a return value as VOID or UNDEFINED
        eg. displayMessage()
                -no value return but is an event invoker
    
    Using return values in your own functions
        -you need to use the return keyword

Parameters and Arguments

    Parameters
        -items listed between the parentheses in a function declaration 
        -placeholder for some future value
    
    Arguments 
        the actual values we decide to pass to the function
    
Functions (additional notes from javascript.info)
    local variables 
        variables inside a function

    outer variables (global)
        outside a function, can be used anywhere

    if there is a local variable same as the outer variable, the local variable will be the one to be used inside the function not the outer one
        also called as shadowing
    
    good practice to minimize the use of global variables

    Parameter - function declaration (declaration time term)
    Argument - value when function is called (call time term)

    default value
        parameter = <default value here>

        it is presented when there are no arguments when a function is called 

        <default value> can also be a FUNCTION
    
    Alternative default parameters 
        1. comparing it with undefined 
                parameter === undefined

        2. using || operator (first truthy)
                parameter = parameter || 'default value'
        
        3. using nullish coalescing operator ??
                null and undefined lang ang falsy 

    Returning a value 
        when execution reaches it, the function will STOP

        returning without a value will just stop the function 
            A function with an empty return or without it returns UNDEFINED

        NOTE: Never add a new line after return
                just use () if you have a long line of return 

    Naming a function 
        should start with a VERBAL prefix (usually)
            eg: 
                "get…" – return a value,
                "calc…" – calculate something,
                "create…" – create something,
                "check…" – check something and return a boolean, etc.
        
    RULE: One function - one action 
        function should do exactly what you name them 

        Ultrashort function names
            functions that are used very often sometimes have ultashort names 

            eg. jQuery - $
                Lodash - _

                (these are exceptions)
            
    Function == Comments 
        So, functions can be created even if we don’t intend to reuse them. They structure the code and make it readable


    TASKS 
        let checkAge = (age > 18) ? true : confirm('Did parents allow you?')
        
        function checkAge(age) {
            return Boolean(age > 18) || confirm('Did parents allow you?')
        }

    Function min(a,b)
        function min(a,b) {
            if (a > b) {
                return b
            } else {
                return a
            }
        }

    Function pow(x,n)
        function pow(x,n) {
            return (x ** n); 
        }