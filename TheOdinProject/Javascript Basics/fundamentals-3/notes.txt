FUNCTIONS (MDN WEB DOCS)
    -reusable blocks of code
    -invoke - fancy word for run or execute
    functionName();

    Parameters 
        -values that need to included inside the function parentheses 
        -sometimes called arguments, properties, or even attributes
    
    Optional Parameters 
        -parameters you do not have to specify
            eg. .join()
                    default: 
                        [1,2,3]
                
                .join(' ')
                    with param:
                        [1 2 3]

    Default Parameters 
        -specify default values for a parameter
            -this is the value that will be outputed if you invoke a function with a default parameter
                eg. 
                    function hello(name='Chris') {
                        console.log(`Hello ${name}!`);
                    }

                    hello('Ari'); // Hello Ari!
                    hello();      // Hello Chris!

    Anonymous functions and arrow functions 
        -you can create a function that doesn't have a name 
        -seen when a function expects to receive another function as a parameter
        -aka "FUNCTION EXPRESSION"
            -not hoisted (raised)
            Syntax:
              function()
    
    Arrow functions
        instead of function(parameter) {} you write the syntax:
            (parameter) => {}

        you can omit curly braces if the function only has one line
        you can omit brackets around the parameter if it only has one line 
        you can also omit the return statement (IMPLICIT)

            eg. 
                item => item * 2

                is equivalent to 

                function doubleItem(item) { 
                    return item * 2;
                }
        
    Function scope and conflicts (TAKE NOTE)
        Global scope 
            -top level OUTSIDE all your functions
            -values defined in the global scope are accessible from everywhere in the code
        

        keep parts of code locked in functions to avoid coexisting variables from different JS Files 

        output()
            -global function
            -to print a data in an html file

        Note: same scoping rules DO NOT apply to loop and conditional bocks

        ReferenceError
            -check what scope and if variable is defined

    Functions inside functions
        -you can call a function anywhere, even inside another function
    
Function return values (MDN Web Docs)
    Return Values 
        -value that a function returns when it has completed 

    functions that do not return any value has a return value as VOID or UNDEFINED
        eg. displayMessage()
                -no value return but is an event invoker
    
    Using return values in your own functions
        -you need to use the return keyword
    
    
