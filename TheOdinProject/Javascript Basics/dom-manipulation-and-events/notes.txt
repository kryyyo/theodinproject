DOM
    Document Object Model 
    tree-like representation of the contents of a webpage
    a tree of 'nodes'

'selectors'
    used to target the nodes you want to work with
    
    CSS style selectors and relationship properties to target the nodes you want
        eg.  <div class="display"></div>
                    div.display
                    .display
                    #container > .display
                    div#container > div.display

    relational selectors 
        firstElementChild or lastElementChild etc. 
    
        eg. container.firstElementChild

DOM Methods 
    use to manipulate our webpage with Javascript

    Query Selectors 
        -element.querySelector(selector) returns a reference to the first match of selector

        -element.querySelectorAll(selectors) returns a “nodelist” containing references to all of the matches of the selectors
            -return value of this is NOT AN ARRAY even though it may look like an array
            -return value is a 'nodelist'
            -big difference is array methods are not all available in a nodelist 
                -a solution for this is to convert the nodelist into an array

                    syntax:
                        Array.from()

                -or a spread operator
                        (...arrayName)

    Element Creation
        Syntax:
            document.createElement(tagName, [options])
        
        creates a new element of tag type tagName
        [options] means you can add some optional parameters to the function

        eg. 
            const div = document.createElement('div');

        this does not put your new element into the DOM 
        creates only, store in the memory
        so you can manipulate first the element before placing it on the page
            adding styles,classes, ids, text, etc
        
    Append Elements
       method for placing the element you created and manipulated 

        parentNode.appendChild(childNode)
            appends childNode as the last child of parentNode
        
        parentNode.insertBefore(newNode, referenceNode)
            inserts newNode into parentNode before the referenceNode

    Remove Elements
        parentNode.removeChild(child)
            removes the child from the parentNode on the DOM and returns a reference to child

    Altering Elements
        containing a created element in a variable so we can alter/manipulate it easier
            const div = document.createElement('div')

        Adding inline style
            eg.
                //using JS property
                div.style.color = 'blue'

                //using CSS property
                div.style.cssText = 'color: blue; background: white';

                //using CSS property
                div.setAttribute('style', 'color: blue; background: white');

                //using CSS property
                div.style['background-color']  

        We can remove inline style by setting the value to an empty string
            eg. 
                div.style.color = '';
                div.style.cssText = '';
                div.setAttribute('');   

        Property names here does not contain the usual kebab case in CSS. and because we are in Javascript, we convert the kebab to a camelCase. just remove hyphens and apply camelCase
            in the case that a property name is a Javascript keyword (reserved words), the property name is prefixed with css
                eg. cssText, cssFloat

        Shorthand properties are also available
        
        Do not forget units! 

        Full list of CSS Property to Javascript Property
        http://domenlightenment.com/#6.2


        Other methods for adding and removing

            we can also use .setProperty(property, value) for adding
                where property is in the syntax of CSS (kebab-style)

                eg. divStyle.setProperty('background-color', 'red')

            .getPropertyValue(property) for reading
                getting the current value of the property
                
                eg. divStyle.getPropertyValue('background-color')

            .removeProperty(property) for deleting 

                eg. divStyle.removeProperty('background-color')

            Other methods so we can use css property syntax:
            https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration

    Editing Attributes
        .setAttribute('attribute', 'value')
            if property already exists, it updates its value
            if it still does not exists, it creates the property with the corresponding value 
            value is always a string even if it is a measurement

        .getAttribute('property')
            reads the value of the specified property

        .removeAttribute('property')
            remove the property 
        
        IDL Attribute
            Interface Definition Language Attribute
            Javascript properties
            not always strings 

            eg. input.maxLength = numberValue (expects a number)

            when you put a string eg "200", it will convert it into number (JS conversion)

        Boolean Attribute 
            eg. required, readonly, disabled 
            
            if a boolean attribute is present, its value is true 
            if it is not present, its value is false 

            to be clear, boolean attributes dont need values to be indicated

            eg:
                <input checked></input>             //checked is true
                <input></input>                     //checked is false 
                <input checked="false"></input>     //checked is true since it is indicated! 

Working with classes 
    div.classList.add(className)
        adds class to your div 

    div.classList.remove(className)
        remove the class from div 

    div.classList.toggle(className)
        if your div doesnt have this className specified, it will add it
        if your div has it, it will remove it

    note: it is often the standard (and cleaner) to use toggle because it uses both functions already

Adding text content 
    div.textContent = ''
        create a text node containing the message, and insert it in the div 

Adding HTML content
    div.innerHTML = '<span>Message</span>'
        renders the HTML inside div
        nag aadd sa pinakaHTML! it can modify the main HTML!
        it can inject JS on a page! some scripts can get sensitive information using this innerHTML! 

        just change it .innerText

        if you will use this innerHTML, make sure that no user input can make it through without being sanitized

important note: textContent is preferable because adding HTML content can create security risks if misused.

Keep in mind: JS does not alter your HTML (original file), but the DOM only! 

Where to put the JS External File linking? 
    put it before the closing tag of the body so that all the HTML will load first thus creating the DOM

    if we put it in the head tag, JS is read first, thus no manipulation will be done in the DOM since it is not created/loaded yet 

    there is an easy fix if there is an instance that a js file is in the head tag
        include a defer attribute in the script tag
            <script src='./js-file.js defer></script>

            defer makes the js file load after the HTML is parsed and DOM is created

Events 
    actions that occur on your webpage
    JS can make our webpage listen and react to events


3 ways
    Method 1
        direct attaching of functions to the HTML Elements 

        <button onclick="alert('Hello World')">Click Me</button>

        less ideal because we're cluttering our HTML
        we can only have 1 'onclick' event per element 

    Method 2
        setting on_event_ property on the DOM object in your JavaScript

        <!-- the HTML file -->
        <button id="btn">Click Me</button>

        // the JavaScript file
        const btn = document.querySelector('#btn');
        btn.onclick = () => alert("Hello World");

        problem again, we can only have 1 'onclick' event per element

    Method 3
        <!-- the HTML file -->
        <button id="btn">Click Me Too</button>  

        // the JavaScript file
        const btn = document.querySelector('#btn');
        btn.addEventListener('click', () => {
        alert("Hello World");
        });

        we have separation of html and JS file 
        we also have allowed multiple event listeners

    Note: all three methods can be used with named functions

    <!-- the HTML file -->
    <!-- METHOD 1 -->
    <button onclick="alertFunction()">CLICK ME BABY</button>

    //JS FILE 
    function alertFunction() {
    alert("YAY! YOU DID IT!");
    }

    // METHOD 2
    btn.onclick = alertFunction;

    // METHOD 3
    btn.addEventListener('click', alertFunction);

    RECOMMENDED! using named function can clean up your code
    especially if you are reusing the function

Accessing more information about the event: 
eg. 
    btn.addEventListener('click', function (e) {
    console.log(e);
    });

    parameter e in the function is an object that references to the event itself

    e.target
        provide information for the target DOM node that was clicked(event)

    you can manipulate the DOM of the target (self) using this
        e.target.style.background = "blue"

Attaching listeners to the groups of node
    use querySelectorAll('selector')
    then treat the nodelist as an array 

    const buttons = document.querySelectorAll('button')

    buttons.forEach( (button) => {
        button.addEventListener('click', ()=> alert(button.id))
    }

    HTML DOM Event Object Reference
    https://www.w3schools.com/jsref/dom_obj_event.asp

to make up an attribute name put it here so html will still read it 

    data-madeUpAttribute = ''

Bubbling
    triggering a nested element will trigger all its parent up to the root element 

    because it captures all events from the parent up to the nested child element, then it triggers/bubble up from the child to the parents 

    