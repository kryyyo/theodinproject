Javascript.info
    a variable that can be a string at one moment and then store a number is possible in "dynamically typed" programming languages such as JavaScript

    8 Data Types
        1. Number 
            Includes:
                -both integer and floating pt
                -"special numeric values": Infinity, -Infinity and NaN

            note: doing maths is safe in JS. Script will never stop with a fatal error. only NaN
        
        2. BigInt
            -really big numbers
            -for cryptography or microsecond-precision
            -integers of arbitrary length

            syntax: (example)
                let thisIsABigInt = 1234567890123456789012345678901234567890n;
            
            -it is specified by adding 'n' on the end of an integer
            -not supported in IE

        3. String 
            3 types of quotes
                1. Double quotes: "hello"
                2. Single quotes: 'hello'
                3. Backticks: `hello`

            Backticks
                -'extended functionality' quotes
                -for template literals
                    -allows us to embed variables and expressions 
            
            there is NO char type (character) in JavaScript

        4. Boolean
            -logical type

                2 values
                    1. True
                    2. False

        5. Null
            -null value
            -typeof null = object       //officialy recognized error and is kept for compatibility
            -'nothing', 'empty', or 'value unknown'

        6. Undefined 
            -'value not assigned'
            -typeof undefined = undefined 
            -use only undefined for the default initial value for UNASSIGNED things 

        7. Objects
            -data type that is used to store collections of data and more complex entities (eg built-in objects)
                eg. array, objects 

            -typeof [arrayhere] = object
            -typeof {key:value} = object

        8. Symbol type is used to create unique identifiers for objects 

    typeof Operator
        -returns the type of the argument 
        -typeof [argument here]
            or typeof(argument)

        officially recognized errors:
            typeof null     // "object"      --should be null
            typeof alert    // "function"    --should be objects
            
MDN Web Docs Notes 

Handling text â€” strings in JavaScript

    Escaping characters in a string 
        use \ before any character you are escaping (like in terminal window)

        eg. 
        const bigmouth = 'I\'ve got no right to take my place...';
        console.log(bigmouth);

        output: I've got no right ot take my place...

        reference for other Escape Sequences:
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#escape_sequences

    Concatenating strings 
        -use of template literals
            -use of Backticks ``
            -so we can embed variables in it without using the + operator
            -embedding syntax:  ${expression here}
            -respects line breaks (no need to use \n)

    prompt() and alert() functions
        prompt()
            -ask the user via popup dialog box and store the input as text

        alert()
            -display a popup containing its arguments 
    
    toString() method
        -converts number to string type
        -counterpart of Number() and unary operator

        eg.
            const myNum2 = 123;
            const myString2 = myNum2.toString();
            console.log(typeof myString2);          //string 

JavaScript String Methods (w3Schools)

    .length
        -returns the length of a string

    Extracting String Parts 
        3 Methods   
            - slice(start, end)
            - substring(start, end)
            - substr(start, length)

    .slice(start, end)
        -end position not included

        eg. 
            let str = "Apple, Banana, Kiwi";
            let part = str.slice(7, 13);        //Banana 

        
        note: first position is 0 (for positive parameters)

            if negative parameters: position is counted from END of string
        
        -omitting the 2nd parameter will slice out the rest of the string that is not counted by the 1st parameter! 

    .substring(start, end)
        -like slice(), but NO NEGATIVE values 

    .substr(start, length)
        -like slice(), but the 2nd parameter is the LENGTH of the extracted part

        eg.
            let str = "Apple, Banana, Kiwi";
            let part = str.substr(7, 6);            //Banana
        
    .replace( 'stringToBeReplaced' , 'newString')
        notes:
            -it does not change the ORIGINAL string it is called on
            -returns to a NEW string 
            -replaces only first match
                solution for this:
                    use /g flag

                    eg.
                    let text = "Please visit Microsoft and Microsoft!";
                    let newText = text.replace(/Microsoft/g, "W3Schools");



            -case sensitive
                solution for this: 
                    use /i flag

                    eg. 
                        let text = "Please visit Microsoft!";
                        let newText = text.replace(/MICROSOFT/i, "W3Schools");          
    
    .toUpperCase()

    .toLowerCase()

    .concat()
        -join two or more strings 
        -can be used instead of + operator 
    
        IMPORTANT NOTE:
            All string methods return a new string. They don't modify the original string.

            Formally said:

            Strings are immutable: Strings cannot be changed, only replaced.
    
    .trim()
        -removes whitespace from both sides of a string

        eg.
            let text1 = "      Hello World!      ";
            let text2 = text1.trim();

    ES2017 JavaScript String Padding
        -support padding at beginning and ending of a string 
        2 additional methods:
            1. padStart
            2. padEnd

    .padStart( numberOfDesiredCharacters, characterToBeAdded )
    .padEnd( numberOfDesiredCharacters, characterToBeAdded )

        eg.

        let text = "5";
        let padded = text.padStart(4,0);        //0005

        let text = "5";
        let padded = text.padEnd(4,0);          //5000
    
    Extracting String Characters 
        3 methods
            -charAt(position)
            -charCodeAt(position)
            -Property access []

    .charAt(position)
        -returns the character at the specified index(position)

    .charCodeAt(position)
        -returns the UNICODE of the character at the specified index(position)

    ES2009 - property access
        [position]

        eg.
            let text = "HELLO WORLD";
            let char = text[0];         //H

        -might be a little unpredictable! avoid
            -make strings look like array
            -if no character is found, it returns Undefined
            -read only (does not specify errors)
    
    .split("<separatorCharacter>")
        -converts string to an array
        
        eg.
            text.split(",")    // Split on commas
            text.split(" ")    // Split on spaces
            text.split("|")    // Split on pipe

        .split()
            -returned array will contain the WHOLE string with index of 0 
                eg. 
                text = 'hello'
                text.split()        //[Hello]
                
        .split("")
            -returned array will contain the array of EACH single characters 
                eg.
                text = 'hello'
                text.split("")        //[H,e,l,l,o]

    JS String References: 
    https://www.w3schools.com/jsref/jsref_obj_string.asp

Method 
    -bit of functionality that is BUILT-INTO the language or into specific data types

    String References from MDN Web Docs:
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String