Javascript.info
    a variable that can be a string at one moment and then store a number is possible in "dynamically typed" programming languages such as JavaScript

    8 Data Types
        1. Number 
            Includes:
                -both integer and floating pt
                -"special numeric values": Infinity, -Infinity and NaN

            note: doing maths is safe in JS. Script will never stop with a fatal error. only NaN
        
        2. BigInt
            -really big numbers
            -for cryptography or microsecond-precision
            -integers of arbitrary length

            syntax: (example)
                let thisIsABigInt = 1234567890123456789012345678901234567890n;
            
            -it is specified by adding 'n' on the end of an integer
            -not supported in IE

        3. String 
            3 types of quotes
                1. Double quotes: "hello"
                2. Single quotes: 'hello'
                3. Backticks: `hello`

            Backticks
                -'extended functionality' quotes
                -for template literals
                    -allows us to embed variables and expressions 
            
            there is NO char type (character) in JavaScript

        4. Boolean
            -logical type

                2 values
                    1. True
                    2. False

        5. Null
            -null value
            -typeof null = object       //officialy recognized error and is kept for compatibility
            -'nothing', 'empty', or 'value unknown'

        6. Undefined 
            -'value not assigned'
            -typeof undefined = undefined 
            -use only undefined for the default initial value for UNASSIGNED things 

        7. Objects
            -data type that is used to store collections of data and more complex entities (eg built-in objects)
            -not a 'primitive' type because it can contain many collections
                eg. array, objects 

            -typeof [arrayhere] = object
            -typeof {key:value} = object

        8. Symbol type is used to create unique identifiers for objects 

    typeof Operator
        -returns the type of the argument 
        -typeof [argument here]
            or typeof(argument)

        officially recognized errors:
            typeof null     // "object"      --should be null
            typeof alert    // "function"    --should be objects
            
MDN Web Docs Notes 

Handling text — strings in JavaScript

    Escaping characters in a string 
        use \ before any character you are escaping (like in terminal window)

        eg. 
        const bigmouth = 'I\'ve got no right to take my place...';
        console.log(bigmouth);

        output: I've got no right ot take my place...

        reference for other Escape Sequences:
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#escape_sequences

    Concatenating strings 
        -use of template literals
            -use of Backticks ``
            -so we can embed variables in it without using the + operator
            -embedding syntax:  ${expression here}
            -respects line breaks (no need to use \n)

    prompt() and alert() functions
        prompt()
            -ask the user via popup dialog box and store the input as text

        alert()
            -display a popup containing its arguments 
    
    toString() method
        -converts number to string type
        -counterpart of Number() and unary operator

        eg.
            const myNum2 = 123;
            const myString2 = myNum2.toString();
            console.log(typeof myString2);          //string 

JavaScript String Methods (w3Schools)

    .length
        -returns the length of a string

    Extracting String Parts 
        3 Methods   
            - slice(start, end)
            - substring(start, end)
            - substr(start, length)

    .slice(start, end)
        -end position not included

        eg. 
            let str = "Apple, Banana, Kiwi";
            let part = str.slice(7, 13);        //Banana 

        
        note: first position is 0 (for positive parameters)

            if negative parameters: position is counted from END of string
        
        -omitting the 2nd parameter will slice out the rest of the string that is not counted by the 1st parameter! 

    .substring(start, end)
        -like slice(), but NO NEGATIVE values 

    .substr(start, length)
        -like slice(), but the 2nd parameter is the LENGTH of the extracted part

        eg.
            let str = "Apple, Banana, Kiwi";
            let part = str.substr(7, 6);            //Banana
        
    .replace( 'stringToBeReplaced' , 'newString')
        notes:
            -it does not change the ORIGINAL string it is called on
            -returns to a NEW string 
            -replaces only first match
                solution for this:
                    use /g flag

                    eg.
                    let text = "Please visit Microsoft and Microsoft!";
                    let newText = text.replace(/Microsoft/g, "W3Schools");



            -case sensitive
                solution for this: 
                    use /i flag

                    eg. 
                        let text = "Please visit Microsoft!";
                        let newText = text.replace(/MICROSOFT/i, "W3Schools");          
    
    .toUpperCase()

    .toLowerCase()

    .concat()
        -join two or more strings 
        -can be used instead of + operator 
    
        IMPORTANT NOTE:
            All string methods return a new string. They don't modify the original string.

            Formally said:

            Strings are immutable: Strings cannot be changed, only replaced.
    
    .trim()
        -removes whitespace from both sides of a string

        eg.
            let text1 = "      Hello World!      ";
            let text2 = text1.trim();

    ES2017 JavaScript String Padding
        -support padding at beginning and ending of a string 
        2 additional methods:
            1. padStart
            2. padEnd

    .padStart( numberOfDesiredCharacters, characterToBeAdded )
    .padEnd( numberOfDesiredCharacters, characterToBeAdded )

        eg.

        let text = "5";
        let padded = text.padStart(4,0);        //0005

        let text = "5";
        let padded = text.padEnd(4,0);          //5000
    
    Extracting String Characters 
        3 methods
            -charAt(position)
            -charCodeAt(position)
            -Property access []

    .charAt(position)
        -returns the character at the specified index(position)

    .charCodeAt(position)
        -returns the UNICODE of the character at the specified index(position)

    ES2009 - property access
        [position]

        eg.
            let text = "HELLO WORLD";
            let char = text[0];         //H

        -might be a little unpredictable! avoid
            -make strings look like array
            -if no character is found, it returns Undefined
            -read only (does not specify errors)
    
    .split("<separatorCharacter>")
        -converts string to an array
        
        eg.
            text.split(",")    // Split on commas
            text.split(" ")    // Split on spaces
            text.split("|")    // Split on pipe

        .split()
            -returned array will contain the WHOLE string with index of 0 
                eg. 
                text = 'hello'
                text.split()        //[Hello]
                
        .split("")
            -returned array will contain the array of EACH single characters 
                eg.
                text = 'hello'
                text.split("")        //[H,e,l,l,o]

    JS String References: 
    https://www.w3schools.com/jsref/jsref_obj_string.asp

Method 
    -bit of functionality that is BUILT-INTO the language or into specific data types

    String References from MDN Web Docs:
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String

MDN Web Docs String (Additional Notes)
    String() constructor
        -built-in constructor 
        -not recommended as it turns the string type into object type

        const string4 = new String("A String object");

        typeof string4      //object

    Character access
        1. 'string'.charAt(index)
        2. 'string'[index]

    Comparing Strings 
        -using less than and greater than operators 

        -values of alphabet also increases alphabetically 
            eg. a ~ 1, b ~ 2
        
    String primitives and String objects
        -primitives (commonly)
        -objects (from constructors)
            -this does not perform arithmetics on number strings! it returns the original expression

        to convert string object to string primitive use .valueOf() method
            stringObject.valueOf()          //stringPrimitive
    
    Long Literal Strings
        eg. (same output)

            let longString = "This is a very long string which needs " +
                 "to wrap across multiple lines because " +
                 "otherwise my code is unreadable."
            
            let longString = "This is a very long string which needs \
            to wrap across multiple lines because \
            otherwise my code is unreadable."

https://javascript.info/comparison Notes
    String comparison 
        -JS uses "dictionary" or "lexicographical" order
        -strings are compared letter-by-letter

        eg:
            alert( 'Z' > 'A' ); // true
            alert( 'Glow' > 'Glee' ); // true
            alert( 'Bee' > 'Be' ); // true

        -not real dictionary but UNICODE ORDER
            a > A       //true 

            because lowercase characters has a GREATER index in unicode
    
    Truthy and Falsy
        true has a value of 1
        false has a value of 0 

        eg.
            alert( true == 1 ); // true
            alert( false == 0 ); // true  

            Boolean() method
                -converts a type to Boolean

    Comparison with null and undefined 

        strict equality check ===
            alert( null === undefined ); // false      

        non-strict equality check ==
            alert( null == undefined ); // true

            (only here)

        maths and other comparisons
            null/undefined are converted to numbers: null becomes 0, while undefined becomes NaN
        
        Strange result: null vs 0
            alert( null > 0 );  // (1) false
            alert( null == 0 ); // (2) false
            alert( null >= 0 ); // (3) true

            explanation: 
                Comparisons (>, <, >=, <=)
                    -convert null to a number 
                    -null to 0

                    alert( null > 0 );
                    alert( 0 > 0)       ---false! 

                    alert( null >= 0 );
                    alert( 0 >= 0 )     ---true!
                
                Equality Check (==, ===, !=, !==)
                    -original undefined and null 

                    only null = undefined is true for these two!! 
                        they equal each other and don’t equal anything else

        Incomparable undefined
            alert( undefined > 0 ); // false (1)
            alert( undefined < 0 ); // false (2)
            alert( undefined == 0 ); // false (3)

            explanation:
                Comparisons (>, <, >=, <=)
                    -convert undefined to NaN
                    -NaN is always false! (falsy)
                
                Equality Check (==, ===, !=, !==)
                    -original undefined and null 

                    only undefined = null is true again! 

    Avoid Problems:
        -treat any comparison with undefined/null with exceptional care
        -don't use comparisons with null/undefined value unless you're sure of what you're doing 
    
        Sample:
            5 > 4 → true
            "apple" > "pineapple" → false
            "2" > "12" → true
            undefined == null → true
            undefined === null → false
            null == "\n0\n" → false
            null === +"\n0\n" → false

JavaScript if else and else if 
    Conditional Statements
        -perform different actions for different decisions 
    
    In JavaScript we have the following conditional statements:
        -Use if to specify a block of code to be executed, if a specified condition is true
        -Use else to specify a block of code to be executed, if the same condition is false
        -Use else if to specify a new condition to test, if the first condition is false
        -Use switch to specify many alternative blocks of code to be executed

    The if Statement 
        Syntax:
            if (condition) {
                //block of code to be executed if the condition is true
            }
        
    note: use only lowercase for if, else if, else, and switch because it will generate a JavaScript Error 

    The else Statement 
        Syntax:
            if (condition) {
                //block of code to be executed if the condition is true
            } else {
                //block of code to be executed if the condition is false
            }

    The else if Statement 
        Syntax:
            if (condition1) {
                //block of code to be executed if the condition1 is true
            } else if (condition2) {
                //block of code to be executed if the condition1 is false, and condition 2 is true
            } else {
                 //block of code to be executed if all the conditions are false
            }

javascript.info

Logical Operators
    4 logical operators in Javascript
        1. || (OR)
        2. && (AND)
        3. ! (NOT)
        4. ?? (NULLISH COALESCING)

    note: they can be applied to values of any type not just boolean and their result is also of any type

    || (OR)
        eg. result = a || b;
        
        -in classical programming,
            logical OR is meant for boolean values only
            any true arguments, it returns true, otherwise it returns false

            4 possible logical combinations 
                1. alert( true || true );   // true
                2. alert( false || true );  // true
                3. alert( true || false );  // true
                4. alert( false || false ); // false
            
            if operand is not a boolean, it is converted to a boolean for the evaluation
                for instance: number 1 is treated as true, number 0 as false 

            most of the time, || statement is used in an if statement to test if ANY of the given condition is true (KAHIT NASAANG ORDER)

        -"extra" features aside from classical programming
            || (OR) finds the FIRST TRUTHY value

                steps on how || evaluate conditions 
                    1. left to right
                    2. converts each operand to boolean from
                    3. find the first TRUTHY value and return the original operand (before conversion to boolean) 
                    4. if there are NO TRUTHY value (all false), it will return the LAST operand 

                interesting usage for this: 
                    1. Getting the first truthy value from a list of variables or expressions

                        eg. 
                            let firstName = "";
                            let lastName = "";
                            let nickName = "SuperCoder";

                            alert( firstName || lastName || nickName || "Anonymous"); // SuperCoder

                    2. Short-circuit evaluation
                        -after finding the FIRST TRUTHY, it will terminate the conditional process, do not touch the other arguments after it, and return the first truthy value immediately 
                        
                        eg.
                            true || alert("not printed");
                            false || alert("printed");

                            //only the 2nd one will execute alert! 

    && (AND)
        eg. result = a && b;

        -in classical programming
            AND returns true if both operands are truthy and false otherwise

            eg. 
                alert( true && true );   // true
                alert( false && true );  // false
                alert( true && false );  // false
                alert( false && false ); // false
            
        -extra features
            && (AND) finds the FIRST FALSY value

                steps on how && evaluate conditions 
                    1. left to right
                    2. converts each operand to boolean from
                    3. find the first FALSY value and return the original operand (before conversion to boolean) 
                    4. if all are TRUTHY value (all true), it will return the LAST operand 
                
    note: do not replace if with || or &&!!! it is not readable! 

    ! (NOT)
        eg. result = !value;

            steps on how ! evaluate
                1. convert operand to boolean type
                2. returns the inverse value (boolean type)
            
            sometimes used to convert data types to boolean using the DOUBLE NOT (!!)
                1. first ! - convert operand and return the inverse value as boolean 
                2. second ! - inverse the inversed value (return to original value)

            but there is a more verbose way to convert to boolean
                use Boolean(argument) function 

    Precedence of Logical Operators
        ! > && > ||
    
    notes: (examples)
        alert( alert(1) || 2 || alert(3) );         //1 and then 2
            1. The first OR || evaluates its left operand alert(1). That shows the first message with 1.
            2. The alert returns undefined, so OR goes on to the second operand searching for a truthy value.
            3. The second operand 2 is truthy, so the execution is halted, 2 is returned and then shown by the outer alert.

        alert( alert(1) && alert(2) );              //1 and then undefined
            1. The call to alert returns undefined (it just shows a message, so there’s no meaningful return).

            2. Because of that, && evaluates the left operand (outputs 1), and immediately stops, because undefined is a falsy value. And && looks for a falsy value and returns it, so it’s done.


        tasks
            Check the range between
                if (age >= 14 && age <=90) {
                    return age 
                }

            Check the range outside
                if (age > 90 || age < 14 ) {}
                if (!(age >= 14 && age <=90)) {}
            
            Check the login
                let user = prompt('login here')

                if (user === "Admin") {
                    let password = prompt('password?')
                        if (password === 'TheMaster') {
                            alert("Welcome!")
                        } else if (pass === '' || password === null) {
                            alert("Cancelled")
                        } else
                            alert("Wrong Password")
                } else if (user === '' || user === null) {
                    alert("Cancelled")
                } else {
                    alert("I don't know you")
                }

            //please paunahin mo yung user === '' sa user === null
            //do not forget, = is not the same as == and ===

MDN Web Docs - Making your decisions in your code (Additonal notes)

    only Falsy values: (return false even if not explicitly given)
        -false
        -undefined
        -null
        -0
        -NaN
        -''
        -""

    the rest is truthy! even negative integers (return true even if not explicitly given)

    switch Statements
        -for testing a single expression/value with many outcomes/choices

        syntax: 
            switch (expression/value) {
                case choice1:               //do not forget colon
                    run this code
                    break;                  //do not forget break for every case
                
                case choice2:
                    run this code
                    break;

                case choice3:
                    run this code
                    break;
                
                //include as many cases as you want

                default:          //this is like the else statement which is optional
                    actually, just run this code
            }
        
    Ternary Operator
        test a condition, returns one value/expression if it is true, and another if it is false

        Syntax:
            ( condition ) ? run this code : run this code instead

        eg. 
            let greeting = ( is Birthday ) ? 'HBD' : 'Kelan Bday?'

        notes: please check this website we can use this for the nightmode function 
        https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals#ternary_operator

javascript.info (as a review)
    again: 
        -A number 0, an empty string "", null, undefined, and NaN all become false. Because of that they are called “falsy” values. 
        -Other values become true, so they are called “truthy”.

    "question mark" operator or Ternary operator
        syntax:
            (condition) ? value1 if true : value2 if false

            more readable way and recommended way: 
            let variable = (condition) ? value1 if true : value2 if false
        
        we can also nest multiple ? here (but not recommended)

        eg. 
            (condition) ? value if true :
            (condition) ? value if true :
            (condition) ? value if true :
            value if all false;

        note: always try to use ? operator in a horizontal way because vertical way is for if statements for readability

    tasks
        Take note! 0 must be a number to be false. If 0 is a STRING,  it will not be false! 

        The name of JavaScript
            let visitorAnswer = prompt('What's the "official" name of Javascript?,'')

            if (visitorAnswer === 'ECMAScript') {
                alert('Right!');
            } else {
                alert('You don't know? ECMAScript!'); 
            }

        Show the sign 
            let number = parseInt(prompt('input a number', ''))

            if (number > 0) {
                alert(1)
            } else if (number < 0) {
                alert(-1)
            } else {
                alert(0)
            }
        
        Rewrite 'if' into '?'
            let result = (a + b < 4) ? 'Below' : 'Over'

        Rewrite 'if..else' into '?'
            let message = (login == 'Employee') ? 'Hello' :
                (login == 'Director') ? 'Greetings' :
                (login == '') ? 'No login' : ''

    IMPORTANT NOTE: DO NOT USE NESTED TERNARYS! It makes the code harder to read, and a properly configured linter (ESLint w/ Airbnb style guide) will consider it an error.

How To Use the Switch Statement in JavaScript (from digitalocean)

    syntax: 
        switch (expression) {
            case x:
                // execute case x code block
                break;
            case y:
                // execute case y code block
                break;
            default:
                // execute default code block
    }

    switch Ranges (interchange value and expression) 
        -personally i do not recommend this, if statement is more readable and less complex 
        eg: 
            const grade = 87; 

            switch (true) {
                // If score is 90 or greater
                case grade >= 90:
                    console.log("A");
                    break;
                // If score is 80 or greater
                case grade >= 80:
                    console.log("B");
                    break;
                // If score is 70 or greater
                case grade >= 70:
                    console.log("C");
                    break;
                // If score is 60 or greater
                case grade >= 60:
                    console.log("D");
                    break;
                // Anything 59 or below is failing
                default:
                    console.log("F");
            }
    
    Multiple Cases with the same output 
        eg. 
            switch (month) {
                // January, February, March
                case 0:
                case 1:
                case 2:
                    console.log("Winter");
                    break;
                // April, May, June
                case 3:
                case 4:
                case 5:
                    console.log("Spring");
                    break;
                // July, August, September
                case 6:
                case 7:
                case 8:
                    console.log("Summer");
                    break;
                // October, November, December
                case 9:
                case 10:
                case 11:
                    console.log("Autumn");
                    break;
                default:
                    console.log("Something went wrong.");
            }

        syntax: 
            switch (condition) {
                case x:
                case y:
                case z:
                    run this code
                    break;
                case a:
                case b:
                case c:
                    run this code
                    break;
                default:
                    run this code instead
            }

The Net Ninja’s Regular Expressions Tutorial (regex)
    