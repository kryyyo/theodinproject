2 ways to include JS
    1. internal
        <script>
            [insert JS code here]
        </script>
    2. external
        <script type="text/JavaScript" src="./script.js"></script>
        -for more complex scripts


Variables
    -"storage containers", "named storage" for data, real-life analogy: a box
    -old:   var [variableName];
    -new:   let [variableName];
            const [variableName]; ----for constants; see notes below

    assignment operator: '='
    alert()
 
    syntax for multiple variables (NOT RECOMMENDED)
        let [variableName1] = [value1], [variableName2] = [value2] ....;

    for readability, use single declarations/multiline 
        let [variableName1] = [value1]
        let [variableName2] = [value2]

    other styles: 
        multiline with multiple
            let [variableName1] = [value1],
                        [variableName2] = [value2]
        
        comma first
            let [variableName1] = [value1]
                    , [variableName2] = [value2]

    -Variables should only be declared once or it will result to error.
        -if we will to change the value of a declared variable just re-assign a value to it

            let [varA] = [valueA]

                [varA] = [newValue]

        -note: there are languages that do not allow variable reassignment like Scala or Erlang. They are called FUNCTIONAL LANGUAGES

    Limitations for Variable Naming: 
        1. must contain only letters, digits, $ and _ 
        2. first character must not be a digit (but can be $ and _)

        camelCase is the naming convention for JavaScript
            -every word starts with a capital letter except for the 1st letter
        
        -variable names are CASE-SENSITIVE
        -non-latin letters are allowed but not recommended
            -only use English names so it will have readability across the globe

    Reserved names 
        -list of reserved words: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords

        -because it is used by the language itself 
        -some examples:
            -let
            -class
            -return
            -function 
        
        -SyntaxError: Unexpected strict mode reserved word

    Assignment without use strict
        -just like declaring variables in python
            [varName] = [value] 
        -bad practice because it would cause an error in strict mode:
            [varName] is not defined 
    
Constants 
    -this is an UNCHANGING variable/ unchanging storage of data
    -once you declare a value for this, it cannot be reassigned

    syntax:
        const [varA] = [valueA]

    -reassigning will cause the error:
        TypeError: Assignment to constant variable.

    Uppercase Constants
        -for "hard-coded" values 
        -used for constants with a pre-defined value right from the beginning of time
        -uses capital letters and underscores 
        -this is for readability

        eg:
            const COLOR_RED = "#F00";
            const COLOR_GREEN = "#0F0";
            const COLOR_BLUE = "#00F";
            const COLOR_ORANGE = "#FF7F00";

            // ...when we need to pick a color
            let color = COLOR_ORANGE;
            alert(color); // #FF7F00

        -when not to use this Uppercase constants:
            -if a constant does not have a universal value for all codes
                eg: const myBirthday = 'January 31' 

                not all people have the same birthday
    
Name Things Right
    -should have a clean and obvious meaning describing the data it stores 
    -most important and complex skills

    
    Good-to-Follow Rules: 
        - use human readable names
        - stay away from abbreviations like a, b, c
        - make names maximally descriptive and concise
        - agree on terms within your team and in your own mind
    
    Reuse or Create?    
        - always Create! 
        - saves time for debugging
        - extra variable is good! 
        - modern JS minifiers and browsers optimize code well enough and using different variables will help the engine optimize your code

Numbers
    -BUILDING BLOCKS of programming logic

    JavaScript Arithmetic
        JS Operators
            -perform arithmetic on numbers (literals/variables)

            + >> addition
            - >> subtraction
            * >> multiplication
            ** >> exponentiation (ES2016)
            / >> division
            % >> modulus division (Remainder)
            ++ >> increment (+1)
            -- >> decrement (-1)

        Arithmetic Operations
            -operates on two numbers  (literals/variables)

            eg: 
                2 literals:
                    let x = 100 + 50;

                2 variables:
                    let x = a + b;

                expressions:
                    let x = (100 + 50) * a;

        Operators and Operands
            operands - the numbers/literals in an operation
            operator - the one who is performing the operation

            eg:
                in let x = (100 + 50) * a;

                operands: 100, 50, a
                operators: +, * 
                    = is an assignment operator

        before ES2016 for exponentiation
            ** is also equal to Math.pow(x,y)

                where:
                    x - base
                    y - exponent

        Operator Precedence
            PEMDAS Rule (same na same sa alam mo)
                -parentheses, exponent, multiplication/division, addition/subtraction
                -md interchangeable (order is important left to right)
                -as interchangeable (order is important left to right)

            to be more precise, see table on JS Operator Precedence Values:
            https://www.w3schools.com/js/js_arithmetic.asp

                same number follows order precedence

                1.  expression grouping     ()
                2.  member                  .
                    member                  []
                    function call           ()
                    create                  new
                3.  postfix increment       i++
                    postfix decrement       i--
                4.  prefix increment        ++i
                    prefix decrement        --i
                    logical not             !
                    type                    typeof
                5.  exponentiation          **
                6.  multiplication          *
                    division                /
                    modulus                 %
                7.  addition                +
                    subtraction             -
                8.  shift left              <<
                    shift right             >>
                    shift right (unsigned)  >>>
                9.  less than               <
                    less than equal         <=
                    greater than            >
                    greater than equal      >=
                    property in object      in
                    instace of object       instanceof
                10. equal                   ==
                    strict equal            ===
                    unequal                 !=
                    strict unequal          !==
                11. bitwise AND             &
                12. bitwise XOR             ^
                13. bitwise OR              |
                14. logical AND             &&
                15. logical OR              ||
                16. nullish coalescing      ??
                17. condition               ?:
                18. assignment              +=
                                            /=
                                            -=
                                            *=
                                            %=
                                            <<=
                                            >>=
                                            >>>=
                                            &=
                                            ^=
                                            |=
                19. pause function          yield
                20. comma                   ,
    

    Javascript Numbers
        -only ONE type of number 

        can be written:
            -with decimals (eg. 3.14)
            -without decimals (eg. 3)
            -with scientific notations (eg. 3e5, 3e-5)

        -always 64-bit Floating Point
            -numbers in 64 bits
                -fraction/mantissa in 52 bits (0-51)
                -exponent in 11 bits (52 to 62)
                -sign in 1 bit (63)

        Integer Precision
            -accurate up to 15 digits

            let x = 999999999999999;   // x will be 999999999999999
            let y = 9999999999999999;  // y will be 10000000000000000

            -max number of decimals is 17

        Floating Precision
            -floating pt arithmetic NOT ALWAYS 100% accurate
            -to solve the problem, make a floating pt as integer (multiplying by powers of 10) then divide the whole expression to what you multiplied
                eg: 
                    let x = 0.2 + 0.1;                  //slight inaccuracy

                    let x = (0.2 * 10 + 0.1 * 10) / 10;       //exact value

        Adding Numbers and Strings 
            2 numbers >> normal arithmetic
            2 strings >> concatenation
            1 number and 1 string >> concatenation eg. 10 + "20" = "1020"
                -order of precedence: left to right
                -pwedeng "string" + 10 + 30 = "string1030"
                    -steps: "string"+10 = "string10" 
                            "string10"+30 = "string1030"

                -pwede ring ganto: 10 + 20 + "30" = "3030"
                    -steps: 10 + 20 = 30
                            30 + "30" = "3030" 

        Numeric Strings
            -pwedeng as string yung mga numbers sa ibang operators pero hindi pwede sa "+"

            eg: "10" - "10" = 0
                "100" * "10" = 1000
                "100" / "10" = 10

                pero di pede "100" + "10" kase ang result na nyan ay 10010
        
        NaN - Not a Number 
            - number is not a legal number

            trying to do arithmetic with a NON-NUMERIC string will result in NaN

                eg. x = 100 / "apple"
                    x = NaN
            
            but numeric string will do 
                
                eg. x = 100 / "10"
                    x = 10

            -use isNan() method to know if a value is not a number 

            when you use NaN in an mathematical operation, the result will be NaN! 

            when you use NaN in a string concatenation: 
                eg. NaN + "5" = NaN5 

            typeof NaN = number         -ironic
        
        Infinity (or -Infinity)
            -outside largest possible number 

                eg. 
                    let myNumber = 2;

                    while (myNumber != Infinity) {
                    myNumber = myNumber * myNumber;
                    }

            -division by 0 also generates Infinity 
            -typeof Infinity = number 

        Hexadecimal
            -numeric constants with 0x prefix
            -do not write a number with a leading zero as JS may interpret it as OCTAL 

        toString(n) method
            -to convert decimal (base 10) to other number systems
                base 16 - Hexadecimal
                base 10 - Decimal
                base 8 - Octal
                base 2 - Binary
            -n is the base and can be from base 2 to base 36 
            
            eg.
                let myNumber = 32 
                
                myNumber.toString(2); -----binary
        
        Javascript Numbers as Objects
            -naming convention: PascalCase
            -defined by 'new' keyword 
            
            eg.
                let x = 123;
                let y = new Number(123);

            typeof x = number
            typeof y = object

            -note: do not do this. new keyword complicates code
                -it can also produce unexpected results since they are different types

            eg. 
                    x === y   >> false (different types)
                    x == y    >> true 


            -but! JS objects CANNOT be compared with each other
                -it will always return FALSE! 

                eg. let x = new Number(500)
                    let y = new Number(500)

                    x === y     >> false
                    x == y      >> false        ---still false since JS objects cannot be compared 

    Javascript Number Reference
        https://www.w3schools.com/jsref/jsref_obj_number.asp

        this is for the methods and properties for numbers

        All number methods return a new value. They do not change the original variable.
    